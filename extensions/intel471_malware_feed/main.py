#!/usr/bin/env python
import json
import math
from datetime import datetime

from dateutil import parser
from eiq_edk import ImporterProcess
from furl import furl

from parsers import parse_indicators, parse_ttps, parse_report
from utils import fetch_with_cursor, batch, fetch_results, fetch_with_paging , Intel471Exception


class MainApp(ImporterProcess):

    def download(self):
        self.send_info(
            {
                "code": "INF-0001",
                "message": "Execution started",
                "description": "Intel471 started downloading data"
            }
        )

        api_url = self.config['api_url']
        api_email = self.config['email']
        api_key = self.config['api_key']
        since = self.config['since']
        until = self.config['until']
        verify = True
        since = parser.isoparse(since)
        indicators_url = furl(api_url).add(path="indicators/stream").url
        from_param = math.floor(since.timestamp()) * 1000
        auth = (api_email, api_key)
        self.intel471_malware_yara_feed(
            since=since, api_url=api_url, api_email=api_email,
            api_key=api_key, verify_ssl=verify
        )
        fetched_indicators = set()
        malware_family_profile_reports = dict()
        query_params = {"from": from_param, "indicator": "*", "count": 100}

        for chunk in batch(
                fetch_with_cursor(
                    self,
                    indicators_url,
                    "indicators",
                    auth,
                    query_params=query_params,
                    verify_ssl=verify
                ),
                10,
            ):
            for indicator in chunk:
                if indicator["uid"] in fetched_indicators:
                    continue
                malware_family_uid = indicator["data"]["threat"]["data"][
                    "malware_family_profile_uid"
                ]
                fetched_indicators.add(indicator["uid"])
                if malware_family_uid in malware_family_profile_reports:
                    report = malware_family_profile_reports[malware_family_uid]
                else:
                    report_url = furl(api_url).add(path="malwareReports").url
                    report = fetch_results(
                        self,
                        report_url,
                        auth=auth,
                        verify_ssl=verify,
                        params={"malwareFamilyProfileUid": malware_family_uid},
                    )
                    malware_family_profile_reports[malware_family_uid] = report
                indicator_report_response = {
                    "indicator": indicator,
                    "report": report.get("malwareReports"),
                }

                timestamp = None
                if indicator.get("activity", dict()).get("last"):
                    timestamp = datetime.utcfromtimestamp(
                        indicator["activity"]["last"] / 1000
                    )

                self.save_raw_data({
                    "raw_data": indicator_report_response, "timestamp": timestamp.isoformat()
                })
                self.send_info(
                    {
                        "code": "INF-0003",
                        "message": "Execution completed successfuly",
                        "description": "Intel471 stored raw data  completed successfuly."
                    }
                )

    def transform(self, raw_data=None):

        self.send_info(
            {
                "code": "INF-0001",
                "message": "Execution started",
                "description": "Intel471 started transforming raw data"
            }
        )

        raw_data = json.loads(raw_data.decode("utf-8"))['raw_data']
        entities, relations = [], []
        feed_type = raw_data.get("feed_type")
        parse_indicators([raw_data["indicator"]], entities, relations, feed_type)
        parse_ttps(
            [raw_data["indicator"]],
            entities,
            relations,
            raw_report=raw_data["report"] if raw_data.get("report") else None,
            feed_type=feed_type
        )
        if raw_data.get("report"):
            report, report_relation = parse_report(raw_data["report"], entities)
            entities.extend(report)
            relations.extend(report_relation)
        linked_entities = {
            "type": "linked-entities",
            "entities": entities,
            "relations": relations,
        }

        self.save_transformed_data(linked_entities)
        self.send_info({
            "code": "INF-0003",
            "message": "Execution completed successfuly",
            "description": f"Intel471 transformed data successfuly."
        })

    def intel471_malware_yara_feed(
            self,
            since: datetime,
            api_url: str,
            api_email: str,
            api_key: str,
            verify_ssl: bool,
            ssl_cert: str = None,
    ):
        """Queries for Intel471 malware yara and associated
        indicators. Does an ETL into STIX 1.2"""
        verify_ssl = ssl_cert or verify_ssl
        yara_url = furl(api_url).add(path="yara").url
        from_param = math.floor(since.timestamp()) * 1000
        auth = (api_email, api_key)
        yara_response = list(
            fetch_with_paging(
                self,
                yara_url,
                "yaraTotalCount",
                "yaras",
                "activity.last",
                auth,
                query_params={
                    "from": from_param,
                    "threatType": "malware",
                    "sort": "earliest",
                },
                verify_ssl=ssl_cert or verify_ssl,
            )
        )
        fetched_yaras = set()
        malware_family_profile_data = dict()
        for chunk in batch(yara_response, 10):
            processed_yara = 0
            for yara in chunk:
                if yara["uid"] in fetched_yaras:
                    continue
                malware_family_uid = yara["data"]["threat"]["data"][
                    "malware_family_profile_uid"
                ]
                fetched_yaras.add(yara["uid"])

                if malware_family_uid in malware_family_profile_data:
                    threat = malware_family_profile_data[malware_family_uid]["threat"]
                    report = malware_family_profile_data[malware_family_uid]["report"]
                else:
                    malware_family_profile_data[malware_family_uid] = dict()

                    threat_url = furl(api_url).add(path="yara").url
                    threat = fetch_results(
                        threat_url,
                        auth=auth,
                        verify_ssl=verify_ssl,
                        params={"threatuid": malware_family_uid},
                    )
                    malware_family_profile_data[malware_family_uid][
                        "threat"] = threat

                    report_url = furl(api_url).add(path="malwareReports").url
                    report = fetch_results(
                        report_url,
                        auth=auth,
                        verify_ssl=verify_ssl,
                        params={"malwareFamilyProfileUid": malware_family_uid},
                    )
                    malware_family_profile_data[malware_family_uid]["report"] = report

                yara_report_response = {
                    "feed_type": "YARA",
                    "indicator": threat.get("yaras"),
                    "report": report.get("malwareReports"),
                }
                self.save_raw_data(yara_report_response)
                processed_yara += 1


if __name__ == "__main__":
    main_app = MainApp()
    main_app.run()
