#!/usr/bin/env python
import json
import math
from datetime import datetime
import structlog
from dateutil import parser
from eiq_edk import ImporterProcess
from furl import furl

from marshmallow.validate import ValidationError
from utils import  fetch_with_paging
from parsers import  transform_vulnerabilities_reports
log = structlog.get_logger(__name__)

class MainApp(ImporterProcess):

    def download(self, stash):
        self.send_info(
            {
                "code": "INF-0001",
                "message": "Execution started",
                "description": "Intel471 vulnerability intelligence started downloading data"
            }
        )

        api_url = self.config['api_url']
        api_email = self.config['email']
        api_key = self.config['api_key']
        since = self.config['since']
        until = self.config['until']
        since = parser.isoparse(since)

        verify_ssl = True
        from_param = math.floor(since.timestamp()) * 1000
        cve_reports = list(
            fetch_with_paging(
                self,
                furl(api_url).add(path="cve/reports").url,
                "cveReportsTotalCount",
                "cveReports",
                "activity.last",
                auth=(api_email, api_key),
                query_params={
                    "from": from_param,
                    "cveReport": "vulnerability",
                    "sort": "earliest",
                },
                verify_ssl=verify_ssl,
            )
        )
        downloaded_reports = set()
        for report in cve_reports:
            if report["uid"] in downloaded_reports:
                continue
            downloaded_reports.add(report["uid"])

            timestamp = None
            if report.get("activity", dict()).get("last"):
                timestamp = datetime.datetime.utcfromtimestamp(
                    report["activity"]["last"] / 1000
                )

            self.save_raw_data({'raw_data' : report , 'timestamp' : timestamp.isoformat()})

        self.send_info(
            {
                "code": "INF-0003",
                "message": "Execution of the extension completed successfully",
                "description": f"Intel471 vulnerability downloaded and stored {len(downloaded_reports)} reports"
            }
        )


    def transform(self, raw_data=None):

        self.send_info(
            {
                "code": "INF-0003",
                "message": "Execution of the extension completed successfully",
                "description": "Intel471 vulnerability started transforming raw data"
            }
        )

        log.info("Transformer started")
        try:
            transformed_data = transform_vulnerabilities_reports(raw_data, self)
            log.info("Transformer transformed data successfully.")
            self.send_info({
                "code": "INF-0003",
                "message": "Execution completed successfully",
                "description": f"Intel471 vulnerability transformed data successfully."
            })
        except ValidationError as ex:

            log.info("Transformer run into error")
            self.send_error({
                "code": "ERR-0000",
                "message": "Validation error for Intel 471 vulnerability intelligence feed",
                "description": f"Intel471 vulnerability intelligence something occupied transforming {ex.messages}"
            })
        except ValueError as ex:

            log.info("Transformer run into error")
            self.send_error({
                "code": "ERR-0000",
                "message": "Validation error for Intel 471 vulnerability intelligence feed",
                "description": f"Intel471 vulnerability intelligence something occupied transforming {ex.messages}"
            })

        self.save_transformed_data(transformed_data)
        log.info("Transformed data successfully stored.")
        self.send_info({
            "code": "INF-0003",
            "message": "Transformed data successfully stored",
            "description": f"Intel471 vulnerability transformed data successfully stored."
        })


if __name__ == "__main__":
    main_app = MainApp()
    main_app.run()
